import { ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, IterableDiffers, NgZone, OnInit } from '@angular/core';
import { FcCallbacks, FcEdge, FcModel, UserCallbacks, UserNodeCallbacks } from './ngx-flowchart.models';
import { FcModelService } from './model.service';
import { FcModelValidationService } from './modelvalidation.service';
import { FcNodeDraggingService } from './node-dragging.service';
import { FcEdgeDrawingService } from './edge-drawing.service';
import { FcEdgeDraggingService } from './edge-dragging.service';
import { FcMouseOverService } from './mouseover.service';
import { FcRectangleSelectService } from './rectangleselect.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxFlowchartComponent implements OnInit, DoCheck {
    private elementRef;
    private differs;
    private modelValidation;
    edgeDrawingService: FcEdgeDrawingService;
    private cd;
    private zone;
    get canvasClass(): string;
    model: FcModel;
    selectedObjects: any[];
    edgeStyle: string;
    userCallbacks: UserCallbacks;
    automaticResize: boolean;
    dragAnimation: string;
    nodeWidth: number;
    nodeHeight: number;
    dropTargetId: string;
    modelChanged: EventEmitter<any>;
    private fitModelSizeByDefaultValue;
    get fitModelSizeByDefault(): boolean;
    set fitModelSizeByDefault(value: boolean);
    callbacks: FcCallbacks;
    userNodeCallbacks: UserNodeCallbacks;
    modelService: FcModelService;
    nodeDraggingService: FcNodeDraggingService;
    edgeDraggingService: FcEdgeDraggingService;
    mouseoverService: FcMouseOverService;
    rectangleSelectService: FcRectangleSelectService;
    arrowDefId: string;
    arrowDefIdSelected: string;
    flowchartConstants: {
        htmlPrefix: string;
        leftConnectorType: string;
        rightConnectorType: string;
        curvedStyle: string;
        lineStyle: string;
        dragAnimationRepaint: string;
        dragAnimationShadow: string;
        canvasClass: string;
        selectedClass: string;
        editClass: string;
        activeClass: string;
        hoverClass: string;
        draggingClass: string;
        edgeClass: string;
        edgeLabelClass: string;
        connectorClass: string;
        magnetClass: string;
        nodeClass: string;
        nodeOverlayClass: string;
        leftConnectorClass: string;
        rightConnectorClass: string;
        canvasResizeThreshold: number;
        canvasResizeStep: number;
    };
    private nodesDiffer;
    private edgesDiffer;
    private readonly detectChangesSubject;
    constructor(elementRef: ElementRef<HTMLElement>, differs: IterableDiffers, modelValidation: FcModelValidationService, edgeDrawingService: FcEdgeDrawingService, cd: ChangeDetectorRef, zone: NgZone);
    ngOnInit(): void;
    ngDoCheck(): void;
    getEdgeDAttribute(edge: FcEdge): string;
    adjustCanvasSize(fit?: boolean): void;
    canvasClick(event: MouseEvent): void;
    edgeMouseDown(event: MouseEvent, edge: FcEdge): void;
    edgeClick(event: MouseEvent, edge: FcEdge): void;
    edgeRemove(event: Event, edge: FcEdge): void;
    edgeEdit(event: Event, edge: FcEdge): void;
    edgeDoubleClick(event: MouseEvent, edge: FcEdge): void;
    edgeMouseOver(event: MouseEvent, edge: FcEdge): void;
    edgeMouseEnter(event: MouseEvent, edge: FcEdge): void;
    edgeMouseLeave(event: MouseEvent, edge: FcEdge): void;
    dragover(event: Event | any): void;
    drop(event: Event | any): void;
    mousedown(event: MouseEvent): void;
    mousemove(event: MouseEvent): void;
    mouseup(event: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxFlowchartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxFlowchartComponent, "fc-canvas", never, { "fitModelSizeByDefault": "fitModelSizeByDefault"; "nodeHeight": "nodeHeight"; "nodeWidth": "nodeWidth"; "dragAnimation": "dragAnimation"; "userCallbacks": "userCallbacks"; "automaticResize": "automaticResize"; "model": "model"; "selectedObjects": "selectedObjects"; "edgeStyle": "edgeStyle"; "dropTargetId": "dropTargetId"; }, { "modelChanged": "modelChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsb3djaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWZsb3djaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJdGVyYWJsZURpZmZlcnMsIE5nWm9uZSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGY0NhbGxiYWNrcywgRmNFZGdlLCBGY01vZGVsLCBVc2VyQ2FsbGJhY2tzLCBVc2VyTm9kZUNhbGxiYWNrcyB9IGZyb20gJy4vbmd4LWZsb3djaGFydC5tb2RlbHMnO1xuaW1wb3J0IHsgRmNNb2RlbFNlcnZpY2UgfSBmcm9tICcuL21vZGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmNNb2RlbFZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9tb2RlbHZhbGlkYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBGY05vZGVEcmFnZ2luZ1NlcnZpY2UgfSBmcm9tICcuL25vZGUtZHJhZ2dpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBGY0VkZ2VEcmF3aW5nU2VydmljZSB9IGZyb20gJy4vZWRnZS1kcmF3aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmNFZGdlRHJhZ2dpbmdTZXJ2aWNlIH0gZnJvbSAnLi9lZGdlLWRyYWdnaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmNNb3VzZU92ZXJTZXJ2aWNlIH0gZnJvbSAnLi9tb3VzZW92ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGY1JlY3RhbmdsZVNlbGVjdFNlcnZpY2UgfSBmcm9tICcuL3JlY3RhbmdsZXNlbGVjdC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEZsb3djaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZGlmZmVycztcbiAgICBwcml2YXRlIG1vZGVsVmFsaWRhdGlvbjtcbiAgICBlZGdlRHJhd2luZ1NlcnZpY2U6IEZjRWRnZURyYXdpbmdTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIGdldCBjYW52YXNDbGFzcygpOiBzdHJpbmc7XG4gICAgbW9kZWw6IEZjTW9kZWw7XG4gICAgc2VsZWN0ZWRPYmplY3RzOiBhbnlbXTtcbiAgICBlZGdlU3R5bGU6IHN0cmluZztcbiAgICB1c2VyQ2FsbGJhY2tzOiBVc2VyQ2FsbGJhY2tzO1xuICAgIGF1dG9tYXRpY1Jlc2l6ZTogYm9vbGVhbjtcbiAgICBkcmFnQW5pbWF0aW9uOiBzdHJpbmc7XG4gICAgbm9kZVdpZHRoOiBudW1iZXI7XG4gICAgbm9kZUhlaWdodDogbnVtYmVyO1xuICAgIGRyb3BUYXJnZXRJZDogc3RyaW5nO1xuICAgIG1vZGVsQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJpdmF0ZSBmaXRNb2RlbFNpemVCeURlZmF1bHRWYWx1ZTtcbiAgICBnZXQgZml0TW9kZWxTaXplQnlEZWZhdWx0KCk6IGJvb2xlYW47XG4gICAgc2V0IGZpdE1vZGVsU2l6ZUJ5RGVmYXVsdCh2YWx1ZTogYm9vbGVhbik7XG4gICAgY2FsbGJhY2tzOiBGY0NhbGxiYWNrcztcbiAgICB1c2VyTm9kZUNhbGxiYWNrczogVXNlck5vZGVDYWxsYmFja3M7XG4gICAgbW9kZWxTZXJ2aWNlOiBGY01vZGVsU2VydmljZTtcbiAgICBub2RlRHJhZ2dpbmdTZXJ2aWNlOiBGY05vZGVEcmFnZ2luZ1NlcnZpY2U7XG4gICAgZWRnZURyYWdnaW5nU2VydmljZTogRmNFZGdlRHJhZ2dpbmdTZXJ2aWNlO1xuICAgIG1vdXNlb3ZlclNlcnZpY2U6IEZjTW91c2VPdmVyU2VydmljZTtcbiAgICByZWN0YW5nbGVTZWxlY3RTZXJ2aWNlOiBGY1JlY3RhbmdsZVNlbGVjdFNlcnZpY2U7XG4gICAgYXJyb3dEZWZJZDogc3RyaW5nO1xuICAgIGFycm93RGVmSWRTZWxlY3RlZDogc3RyaW5nO1xuICAgIGZsb3djaGFydENvbnN0YW50czoge1xuICAgICAgICBodG1sUHJlZml4OiBzdHJpbmc7XG4gICAgICAgIGxlZnRDb25uZWN0b3JUeXBlOiBzdHJpbmc7XG4gICAgICAgIHJpZ2h0Q29ubmVjdG9yVHlwZTogc3RyaW5nO1xuICAgICAgICBjdXJ2ZWRTdHlsZTogc3RyaW5nO1xuICAgICAgICBsaW5lU3R5bGU6IHN0cmluZztcbiAgICAgICAgZHJhZ0FuaW1hdGlvblJlcGFpbnQ6IHN0cmluZztcbiAgICAgICAgZHJhZ0FuaW1hdGlvblNoYWRvdzogc3RyaW5nO1xuICAgICAgICBjYW52YXNDbGFzczogc3RyaW5nO1xuICAgICAgICBzZWxlY3RlZENsYXNzOiBzdHJpbmc7XG4gICAgICAgIGVkaXRDbGFzczogc3RyaW5nO1xuICAgICAgICBhY3RpdmVDbGFzczogc3RyaW5nO1xuICAgICAgICBob3ZlckNsYXNzOiBzdHJpbmc7XG4gICAgICAgIGRyYWdnaW5nQ2xhc3M6IHN0cmluZztcbiAgICAgICAgZWRnZUNsYXNzOiBzdHJpbmc7XG4gICAgICAgIGVkZ2VMYWJlbENsYXNzOiBzdHJpbmc7XG4gICAgICAgIGNvbm5lY3RvckNsYXNzOiBzdHJpbmc7XG4gICAgICAgIG1hZ25ldENsYXNzOiBzdHJpbmc7XG4gICAgICAgIG5vZGVDbGFzczogc3RyaW5nO1xuICAgICAgICBub2RlT3ZlcmxheUNsYXNzOiBzdHJpbmc7XG4gICAgICAgIGxlZnRDb25uZWN0b3JDbGFzczogc3RyaW5nO1xuICAgICAgICByaWdodENvbm5lY3RvckNsYXNzOiBzdHJpbmc7XG4gICAgICAgIGNhbnZhc1Jlc2l6ZVRocmVzaG9sZDogbnVtYmVyO1xuICAgICAgICBjYW52YXNSZXNpemVTdGVwOiBudW1iZXI7XG4gICAgfTtcbiAgICBwcml2YXRlIG5vZGVzRGlmZmVyO1xuICAgIHByaXZhdGUgZWRnZXNEaWZmZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZXRlY3RDaGFuZ2VzU3ViamVjdDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBtb2RlbFZhbGlkYXRpb246IEZjTW9kZWxWYWxpZGF0aW9uU2VydmljZSwgZWRnZURyYXdpbmdTZXJ2aWNlOiBGY0VkZ2VEcmF3aW5nU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgZ2V0RWRnZURBdHRyaWJ1dGUoZWRnZTogRmNFZGdlKTogc3RyaW5nO1xuICAgIGFkanVzdENhbnZhc1NpemUoZml0PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2FudmFzQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIGVkZ2VNb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQsIGVkZ2U6IEZjRWRnZSk6IHZvaWQ7XG4gICAgZWRnZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCBlZGdlOiBGY0VkZ2UpOiB2b2lkO1xuICAgIGVkZ2VSZW1vdmUoZXZlbnQ6IEV2ZW50LCBlZGdlOiBGY0VkZ2UpOiB2b2lkO1xuICAgIGVkZ2VFZGl0KGV2ZW50OiBFdmVudCwgZWRnZTogRmNFZGdlKTogdm9pZDtcbiAgICBlZGdlRG91YmxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIGVkZ2U6IEZjRWRnZSk6IHZvaWQ7XG4gICAgZWRnZU1vdXNlT3ZlcihldmVudDogTW91c2VFdmVudCwgZWRnZTogRmNFZGdlKTogdm9pZDtcbiAgICBlZGdlTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCwgZWRnZTogRmNFZGdlKTogdm9pZDtcbiAgICBlZGdlTW91c2VMZWF2ZShldmVudDogTW91c2VFdmVudCwgZWRnZTogRmNFZGdlKTogdm9pZDtcbiAgICBkcmFnb3ZlcihldmVudDogRXZlbnQgfCBhbnkpOiB2b2lkO1xuICAgIGRyb3AoZXZlbnQ6IEV2ZW50IHwgYW55KTogdm9pZDtcbiAgICBtb3VzZWRvd24oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG1vdXNlbW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgbW91c2V1cChldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG59XG4iXX0=